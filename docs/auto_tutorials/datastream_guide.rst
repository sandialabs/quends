
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/datastream_guide.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_datastream_guide.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_datastream_guide.py:


DataStream Class
----------------
This tutorial demonstrates the usage of the DataStream class,
which provides methods for analyzing time-series data.

The following features are:
    - **Trimming**: Identifies steady-state regions in data.
    - **Statistical Analysis**: Computes mean, standard deviation, confidence intervals, and cumulative statistics.
    - **Stationarity Testing**: Uses the Augmented Dickey-Fuller test.
    - **Effective Sample Size (ESS)**: Estimates the independent sample size.
    - **Optimal Window Size**: Determines the best window for data smoothing.

.. GENERATED FROM PYTHON SOURCE LINES 16-17

Import DataStream

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    import quends as qnds








.. GENERATED FROM PYTHON SOURCE LINES 20-23

GX Data Analysis
----------------
Analysis on GX Data

.. GENERATED FROM PYTHON SOURCE LINES 23-35

.. code-block:: Python


    # Specify the file paths
    csv_file_path = "gx/tprim_2_0.out.csv"
    csv2_file_path = "gx/ensemble/tprim_2_5_a.out.csv"

    # Load the data from CSV files
    data_stream_csv = qnds.from_csv(csv_file_path)
    data_stream_gx = qnds.from_csv(csv2_file_path)

    # Display the first few rows of the GX data
    data_stream_gx.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time</th>
          <th>Phi2_t</th>
          <th>Phi2_kxt</th>
          <th>Phi2_kyt</th>
          <th>Phi2_kxkyt</th>
          <th>Phi2_zt</th>
          <th>Apar2_t</th>
          <th>Apar2_kxt</th>
          <th>Apar2_kyt</th>
          <th>Apar2_kxkyt</th>
          <th>Apar2_zt</th>
          <th>Phi2_zonal_t</th>
          <th>Phi2_zonal_kxt</th>
          <th>Phi2_zonal_zt</th>
          <th>Wg_st</th>
          <th>Wg_kxst</th>
          <th>Wg_kyst</th>
          <th>Wg_kxkyst</th>
          <th>Wg_zst</th>
          <th>Wg_lmst</th>
          <th>Wphi_st</th>
          <th>Wphi_kxst</th>
          <th>Wphi_kyst</th>
          <th>Wphi_kxkyst</th>
          <th>Wphi_zst</th>
          <th>Wapar_st</th>
          <th>Wapar_kxst</th>
          <th>Wapar_kyst</th>
          <th>Wapar_kxkyst</th>
          <th>Wapar_zst</th>
          <th>HeatFlux_st</th>
          <th>HeatFlux_kxst</th>
          <th>HeatFlux_kyst</th>
          <th>HeatFlux_kxkyst</th>
          <th>HeatFlux_zst</th>
          <th>HeatFluxES_st</th>
          <th>HeatFluxES_kxst</th>
          <th>HeatFluxES_kyst</th>
          <th>HeatFluxES_kxkyst</th>
          <th>HeatFluxES_zst</th>
          <th>HeatFluxApar_st</th>
          <th>HeatFluxApar_kxst</th>
          <th>HeatFluxApar_kyst</th>
          <th>HeatFluxApar_kxkyst</th>
          <th>HeatFluxApar_zst</th>
          <th>HeatFluxBpar_st</th>
          <th>HeatFluxBpar_kxst</th>
          <th>HeatFluxBpar_kyst</th>
          <th>HeatFluxBpar_kxkyst</th>
          <th>HeatFluxBpar_zst</th>
          <th>ParticleFlux_st</th>
          <th>ParticleFlux_kxst</th>
          <th>ParticleFlux_kyst</th>
          <th>ParticleFlux_kxkyst</th>
          <th>ParticleFlux_zst</th>
          <th>TurbulentHeating_st</th>
          <th>TurbulentHeating_kxst</th>
          <th>TurbulentHeating_kyst</th>
          <th>TurbulentHeating_kxkyst</th>
          <th>TurbulentHeating_zst</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.020072</td>
          <td>0.000322</td>
          <td>1.014122e-06</td>
          <td>5.556982e-15</td>
          <td>1.283244e-17</td>
          <td>0.000004</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>5.556983e-15</td>
          <td>1.283244e-17</td>
          <td>8.195788e-17</td>
          <td>0.001261</td>
          <td>0.000010</td>
          <td>2.157422e-14</td>
          <td>7.842924e-17</td>
          <td>0.000018</td>
          <td>1.260900e-03</td>
          <td>0.000090</td>
          <td>4.728780e-07</td>
          <td>2.252245e-15</td>
          <td>7.758021e-18</td>
          <td>8.470064e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.000003</td>
          <td>2.114464e-08</td>
          <td>0.000000e+00</td>
          <td>0.0</td>
          <td>3.988991e-08</td>
          <td>0.000003</td>
          <td>2.114464e-08</td>
          <td>0.000000e+00</td>
          <td>0.0</td>
          <td>3.988991e-08</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-4.513479e-11</td>
          <td>-1.238711e-14</td>
          <td>0.000000e+00</td>
          <td>0.0</td>
          <td>-1.328687e-12</td>
        </tr>
        <tr>
          <th>1</th>
          <td>2.027322</td>
          <td>0.000236</td>
          <td>9.462429e-07</td>
          <td>1.035192e-05</td>
          <td>3.763393e-17</td>
          <td>0.000004</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>1.477131e-10</td>
          <td>3.763393e-17</td>
          <td>9.182713e-17</td>
          <td>0.001496</td>
          <td>0.000009</td>
          <td>2.018144e-05</td>
          <td>4.068222e-16</td>
          <td>0.000019</td>
          <td>5.423472e-08</td>
          <td>0.000064</td>
          <td>4.470815e-07</td>
          <td>1.587569e-06</td>
          <td>1.941193e-17</td>
          <td>9.091424e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.000154</td>
          <td>1.935043e-08</td>
          <td>3.436235e-10</td>
          <td>0.0</td>
          <td>4.392872e-08</td>
          <td>0.000154</td>
          <td>1.935043e-08</td>
          <td>3.436235e-10</td>
          <td>0.0</td>
          <td>4.392872e-08</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>6.326710e-12</td>
          <td>-1.907196e-13</td>
          <td>-2.302137e-12</td>
          <td>0.0</td>
          <td>-1.325463e-12</td>
        </tr>
        <tr>
          <th>2</th>
          <td>4.034571</td>
          <td>0.000198</td>
          <td>1.138735e-06</td>
          <td>9.805337e-06</td>
          <td>1.168341e-16</td>
          <td>0.000005</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>3.704297e-10</td>
          <td>1.168341e-16</td>
          <td>1.050660e-16</td>
          <td>0.002205</td>
          <td>0.000011</td>
          <td>1.770925e-05</td>
          <td>7.266167e-16</td>
          <td>0.000019</td>
          <td>1.252036e-08</td>
          <td>0.000053</td>
          <td>5.322058e-07</td>
          <td>1.374501e-06</td>
          <td>6.295199e-17</td>
          <td>9.924838e-07</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.000196</td>
          <td>2.208835e-08</td>
          <td>1.294924e-09</td>
          <td>0.0</td>
          <td>4.903913e-08</td>
          <td>0.000196</td>
          <td>2.208835e-08</td>
          <td>1.294924e-09</td>
          <td>0.0</td>
          <td>4.903913e-08</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-4.022337e-12</td>
          <td>-2.190608e-13</td>
          <td>-1.575239e-12</td>
          <td>0.0</td>
          <td>-4.890709e-13</td>
        </tr>
        <tr>
          <th>3</th>
          <td>6.041821</td>
          <td>0.000206</td>
          <td>1.060234e-06</td>
          <td>9.191237e-06</td>
          <td>2.735980e-16</td>
          <td>0.000005</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>4.042708e-10</td>
          <td>2.735980e-16</td>
          <td>1.229009e-16</td>
          <td>0.002964</td>
          <td>0.000010</td>
          <td>1.881524e-05</td>
          <td>1.689178e-15</td>
          <td>0.000020</td>
          <td>2.801751e-09</td>
          <td>0.000053</td>
          <td>4.835276e-07</td>
          <td>1.562852e-06</td>
          <td>1.470741e-16</td>
          <td>1.104677e-06</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.000236</td>
          <td>2.078288e-08</td>
          <td>2.700831e-09</td>
          <td>0.0</td>
          <td>5.548262e-08</td>
          <td>0.000236</td>
          <td>2.078288e-08</td>
          <td>2.700831e-09</td>
          <td>0.0</td>
          <td>5.548262e-08</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-1.022327e-11</td>
          <td>-3.670521e-13</td>
          <td>-1.553083e-13</td>
          <td>0.0</td>
          <td>-8.325619e-13</td>
        </tr>
        <tr>
          <th>4</th>
          <td>8.049070</td>
          <td>0.000245</td>
          <td>1.066248e-06</td>
          <td>1.006626e-05</td>
          <td>1.340230e-16</td>
          <td>0.000005</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>7.481377e-10</td>
          <td>1.340230e-16</td>
          <td>1.443730e-16</td>
          <td>0.003818</td>
          <td>0.000009</td>
          <td>1.914822e-05</td>
          <td>7.813427e-16</td>
          <td>0.000021</td>
          <td>4.485645e-10</td>
          <td>0.000061</td>
          <td>4.882390e-07</td>
          <td>1.435011e-06</td>
          <td>7.265576e-17</td>
          <td>1.238737e-06</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.000298</td>
          <td>2.149553e-08</td>
          <td>5.369387e-09</td>
          <td>0.0</td>
          <td>6.278837e-08</td>
          <td>0.000298</td>
          <td>2.149553e-08</td>
          <td>5.369387e-09</td>
          <td>0.0</td>
          <td>6.278837e-08</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-1.445467e-11</td>
          <td>-5.255198e-14</td>
          <td>2.001172e-12</td>
          <td>0.0</td>
          <td>-6.776345e-13</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 36-37

Get available variables

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: Python

    data_stream_gx.variables()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Index(['time', 'Phi2_t', 'Phi2_kxt', 'Phi2_kyt', 'Phi2_kxkyt', 'Phi2_zt',
           'Apar2_t', 'Apar2_kxt', 'Apar2_kyt', 'Apar2_kxkyt', 'Apar2_zt',
           'Phi2_zonal_t', 'Phi2_zonal_kxt', 'Phi2_zonal_zt', 'Wg_st', 'Wg_kxst',
           'Wg_kyst', 'Wg_kxkyst', 'Wg_zst', 'Wg_lmst', 'Wphi_st', 'Wphi_kxst',
           'Wphi_kyst', 'Wphi_kxkyst', 'Wphi_zst', 'Wapar_st', 'Wapar_kxst',
           'Wapar_kyst', 'Wapar_kxkyst', 'Wapar_zst', 'HeatFlux_st',
           'HeatFlux_kxst', 'HeatFlux_kyst', 'HeatFlux_kxkyst', 'HeatFlux_zst',
           'HeatFluxES_st', 'HeatFluxES_kxst', 'HeatFluxES_kyst',
           'HeatFluxES_kxkyst', 'HeatFluxES_zst', 'HeatFluxApar_st',
           'HeatFluxApar_kxst', 'HeatFluxApar_kyst', 'HeatFluxApar_kxkyst',
           'HeatFluxApar_zst', 'HeatFluxBpar_st', 'HeatFluxBpar_kxst',
           'HeatFluxBpar_kyst', 'HeatFluxBpar_kxkyst', 'HeatFluxBpar_zst',
           'ParticleFlux_st', 'ParticleFlux_kxst', 'ParticleFlux_kyst',
           'ParticleFlux_kxkyst', 'ParticleFlux_zst', 'TurbulentHeating_st',
           'TurbulentHeating_kxst', 'TurbulentHeating_kyst',
           'TurbulentHeating_kxkyst', 'TurbulentHeating_zst'],
          dtype='object')



.. GENERATED FROM PYTHON SOURCE LINES 40-41

Get number of rows from the following data in GX

.. GENERATED FROM PYTHON SOURCE LINES 41-43

.. code-block:: Python

    len(data_stream_gx)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    201



.. GENERATED FROM PYTHON SOURCE LINES 44-47

Stationary Check
~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 47-54

.. code-block:: Python


    # Check if a single column is stationary
    data_stream_gx.is_stationary("HeatFlux_st")

    # Check if multiple columns are stationary
    data_stream_gx.is_stationary(["HeatFlux_st", "Wg_st", "Phi2_t"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'HeatFlux_st': True, 'Wg_st': True, 'Phi2_t': False}



.. GENERATED FROM PYTHON SOURCE LINES 55-58

Trimming data based to obtain steady-state portion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 60-61

Trim the data based on standard deviation method

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: Python


    # Returns: Dictionary with keys like "results" and "metadata"
    trimmed = data_stream_gx.trim(column_name="HeatFlux_st", batch_size=50, method="std")

    # Print first 5 rows of dataframe
    trimmed.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time</th>
          <th>HeatFlux_st</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>158.592772</td>
          <td>8.508736</td>
        </tr>
        <tr>
          <th>1</th>
          <td>160.600022</td>
          <td>8.699987</td>
        </tr>
        <tr>
          <th>2</th>
          <td>162.607271</td>
          <td>8.852156</td>
        </tr>
        <tr>
          <th>3</th>
          <td>164.614520</td>
          <td>8.883341</td>
        </tr>
        <tr>
          <th>4</th>
          <td>166.621770</td>
          <td>8.713289</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-70

Trim the data based on rolling variance method

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: Python

    trimmed = data_stream_gx.trim(
        column_name="HeatFlux_st", batch_size=50, method="rolling_variance", threshold=0.10
    )

    # Gather results
    trimmed.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time</th>
          <th>Phi2_t</th>
          <th>Phi2_kxt</th>
          <th>Phi2_kyt</th>
          <th>Phi2_kxkyt</th>
          <th>Phi2_zt</th>
          <th>Apar2_t</th>
          <th>Apar2_kxt</th>
          <th>Apar2_kyt</th>
          <th>Apar2_kxkyt</th>
          <th>Apar2_zt</th>
          <th>Phi2_zonal_t</th>
          <th>Phi2_zonal_kxt</th>
          <th>Phi2_zonal_zt</th>
          <th>Wg_st</th>
          <th>Wg_kxst</th>
          <th>Wg_kyst</th>
          <th>Wg_kxkyst</th>
          <th>Wg_zst</th>
          <th>Wg_lmst</th>
          <th>Wphi_st</th>
          <th>Wphi_kxst</th>
          <th>Wphi_kyst</th>
          <th>Wphi_kxkyst</th>
          <th>Wphi_zst</th>
          <th>Wapar_st</th>
          <th>Wapar_kxst</th>
          <th>Wapar_kyst</th>
          <th>Wapar_kxkyst</th>
          <th>Wapar_zst</th>
          <th>HeatFlux_st</th>
          <th>HeatFlux_kxst</th>
          <th>HeatFlux_kyst</th>
          <th>HeatFlux_kxkyst</th>
          <th>HeatFlux_zst</th>
          <th>HeatFluxES_st</th>
          <th>HeatFluxES_kxst</th>
          <th>HeatFluxES_kyst</th>
          <th>HeatFluxES_kxkyst</th>
          <th>HeatFluxES_zst</th>
          <th>HeatFluxApar_st</th>
          <th>HeatFluxApar_kxst</th>
          <th>HeatFluxApar_kyst</th>
          <th>HeatFluxApar_kxkyst</th>
          <th>HeatFluxApar_zst</th>
          <th>HeatFluxBpar_st</th>
          <th>HeatFluxBpar_kxst</th>
          <th>HeatFluxBpar_kyst</th>
          <th>HeatFluxBpar_kxkyst</th>
          <th>HeatFluxBpar_zst</th>
          <th>ParticleFlux_st</th>
          <th>ParticleFlux_kxst</th>
          <th>ParticleFlux_kyst</th>
          <th>ParticleFlux_kxkyst</th>
          <th>ParticleFlux_zst</th>
          <th>TurbulentHeating_st</th>
          <th>TurbulentHeating_kxst</th>
          <th>TurbulentHeating_kyst</th>
          <th>TurbulentHeating_kxkyst</th>
          <th>TurbulentHeating_zst</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 78-79

Trim the data based on threshold method

.. GENERATED FROM PYTHON SOURCE LINES 79-86

.. code-block:: Python

    trimmed = data_stream_gx.trim(
        column_name="HeatFlux_st", batch_size=50, method="threshold", threshold=0.1
    )

    # View trimmed data
    trimmed.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time</th>
          <th>HeatFlux_st</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>158.592772</td>
          <td>8.508736</td>
        </tr>
        <tr>
          <th>1</th>
          <td>160.600022</td>
          <td>8.699987</td>
        </tr>
        <tr>
          <th>2</th>
          <td>162.607271</td>
          <td>8.852156</td>
        </tr>
        <tr>
          <th>3</th>
          <td>164.614520</td>
          <td>8.883341</td>
        </tr>
        <tr>
          <th>4</th>
          <td>166.621770</td>
          <td>8.713289</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 87-91

Effective Sample Size
~~~~~~~~~~~~~~~~~~~~~

Compute Effective Sample Size for specific columns in GX

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python

    ess_dict = data_stream_gx.effective_sample_size(column_names=["HeatFlux_st", "Wg_st"])
    print(ess_dict)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'results': {'HeatFlux_st': 24, 'Wg_st': 10}, 'metadata': [{'operation': 'is_stationary', 'options': {'columns': 'HeatFlux_st'}}, {'operation': 'effective_sample_size', 'options': {'column_names': ['HeatFlux_st', 'Wg_st'], 'alpha': 0.05}}]}




.. GENERATED FROM PYTHON SOURCE LINES 95-96

Compute Effective sample size for trimmed data

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: Python

    ess_df = trimmed.effective_sample_size()
    print(ess_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'results': {'HeatFlux_st': 5}, 'metadata': [{'operation': 'is_stationary', 'options': {'columns': 'HeatFlux_st'}}, {'operation': 'trim', 'options': {'column_name': 'HeatFlux_st', 'batch_size': 50, 'start_time': 0.0, 'method': 'threshold', 'threshold': 0.1, 'robust': True, 'sss_start': 158.59277222661015}}, {'operation': 'effective_sample_size', 'options': {'column_names': None, 'alpha': 0.05}}]}




.. GENERATED FROM PYTHON SOURCE LINES 100-104

UQ Analysis
-----------

Compute Statistics on trimmed dataframe

.. GENERATED FROM PYTHON SOURCE LINES 104-110

.. code-block:: Python


    stats = trimmed.compute_statistics(method="sliding")
    print(stats)

    stats_df = stats["HeatFlux_st"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': {'mean': 7.9406914994528615, 'mean_uncertainty': 0.08981775761011032, 'confidence_interval': (7.764648694537045, 8.116734304368677), 'pm_std': (7.850873741842751, 8.030509257062972), 'effective_sample_size': 5, 'window_size': 24}, 'metadata': [{'operation': 'is_stationary', 'options': {'columns': 'HeatFlux_st'}}, {'operation': 'trim', 'options': {'column_name': 'HeatFlux_st', 'batch_size': 50, 'start_time': 0.0, 'method': 'threshold', 'threshold': 0.1, 'robust': True, 'sss_start': 158.59277222661015}}, {'operation': 'effective_sample_size', 'options': {'column_names': None, 'alpha': 0.05}}, {'operation': 'compute_statistics', 'options': {'column_name': None, 'ddof': 1, 'method': 'sliding', 'window_size': None}}]}




.. GENERATED FROM PYTHON SOURCE LINES 111-113

Exporter
Below Displays the information as a DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: Python

    exporter = qnds.Exporter()
    exporter.display_dataframe(stats_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           mean  mean_uncertainty  ...  effective_sample_size  window_size
    0  7.940691          0.089818  ...                      5           24
    1  7.940691          0.089818  ...                      5           24

    [2 rows x 6 columns]




.. GENERATED FROM PYTHON SOURCE LINES 117-118

Below Displays the information in JSON

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: Python


    exporter.display_json(stats_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
      "mean": 7.9406914994528615,
      "mean_uncertainty": 0.08981775761011032,
      "confidence_interval": [
        7.764648694537045,
        8.116734304368677
      ],
      "pm_std": [
        7.850873741842751,
        8.030509257062972
      ],
      "effective_sample_size": 5,
      "window_size": 24
    }




.. GENERATED FROM PYTHON SOURCE LINES 122-124

Other statistical methods
~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 126-127

Calculate the mean with a window size of 10

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: Python

    mean_df = trimmed.mean(window_size=10)
    print(mean_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': 7.989677796666666}




.. GENERATED FROM PYTHON SOURCE LINES 131-132

Calculate the mean with the method of sliding

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: Python

    mean_df = trimmed.mean(method="sliding")
    print(mean_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': 7.9406914994528615}




.. GENERATED FROM PYTHON SOURCE LINES 136-137

Calculate the mean uncertainty

.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: Python

    uq_df = trimmed.mean_uncertainty()
    print(uq_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': 0.23525686516667507}




.. GENERATED FROM PYTHON SOURCE LINES 141-142

Calculate the mean uncertainty with the method of sliding

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: Python

    uq_df = trimmed.mean_uncertainty(method="sliding")
    uq_df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'HeatFlux_st': 0.08981775761011032}



.. GENERATED FROM PYTHON SOURCE LINES 146-147

Calculate the confidence intervale with the trimmed dataframe

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: Python

    ci_df = trimmed.confidence_interval()
    print(ci_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': (7.528574340939983, 8.45078125239335)}




.. GENERATED FROM PYTHON SOURCE LINES 151-154

Optimal Window
~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 156-157

Calulcautes the optimal window size

.. GENERATED FROM PYTHON SOURCE LINES 157-160

.. code-block:: Python

    optimal_df = trimmed.optimal_window_size()
    print(optimal_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1




.. GENERATED FROM PYTHON SOURCE LINES 161-162

Cumlative Statistics

.. GENERATED FROM PYTHON SOURCE LINES 162-167

.. code-block:: Python

    cumulative = trimmed.cumulative_statistics()
    print(cumulative)

    cumulative_df = cumulative["HeatFlux_st"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': {'cumulative_mean': [8.777007562500001, 8.427817691666668, 8.308147695833334, 8.086430926041666, 7.989677796666667], 'cumulative_uncertainty': [nan, 0.4938290511758112, 0.40607424148898075, 0.553682367211838, 0.5260503426861878], 'standard_error': [nan, 0.3491898708333347, 0.23444707263463616, 0.276841183605919, 0.23525686516667502], 'window_size': 24}, 'metadata': [{'operation': 'is_stationary', 'options': {'columns': 'HeatFlux_st'}}, {'operation': 'trim', 'options': {'column_name': 'HeatFlux_st', 'batch_size': 50, 'start_time': 0.0, 'method': 'threshold', 'threshold': 0.1, 'robust': True, 'sss_start': 158.59277222661015}}, {'operation': 'effective_sample_size', 'options': {'column_names': 'HeatFlux_st', 'alpha': 0.05}}, {'operation': 'cumulative_statistics', 'options': {'column_name': None, 'method': 'non-overlapping', 'window_size': None}}]}




.. GENERATED FROM PYTHON SOURCE LINES 168-169

Display Cumulative Statistics as a DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 169-171

.. code-block:: Python

    exporter.display_dataframe(cumulative_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       cumulative_mean  cumulative_uncertainty  standard_error  window_size
    0         8.777008                     NaN             NaN           24
    1         8.427818                0.493829        0.349190           24
    2         8.308148                0.406074        0.234447           24
    3         8.086431                0.553682        0.276841           24
    4         7.989678                0.526050        0.235257           24




.. GENERATED FROM PYTHON SOURCE LINES 172-175

CGYRO Data Analysis
~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 177-178

Specify the file paths

.. GENERATED FROM PYTHON SOURCE LINES 178-182

.. code-block:: Python

    csv_file_path = "cgyro/output_nu0_50.csv"
    data_stream_cg = qnds.from_csv(csv_file_path)
    data_stream_cg.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Unnamed: 0</th>
          <th>time</th>
          <th>Q_D/Q_GBD</th>
          <th>Q_e/Q_GBD</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>0.5</td>
          <td>0.003355</td>
          <td>0.001669</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>1.0</td>
          <td>0.003314</td>
          <td>0.003338</td>
        </tr>
        <tr>
          <th>2</th>
          <td>2</td>
          <td>1.5</td>
          <td>0.003160</td>
          <td>0.003941</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3</td>
          <td>2.0</td>
          <td>0.002480</td>
          <td>0.002337</td>
        </tr>
        <tr>
          <th>4</th>
          <td>4</td>
          <td>2.5</td>
          <td>0.002004</td>
          <td>0.001941</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 183-184

Get the number of rows

.. GENERATED FROM PYTHON SOURCE LINES 184-186

.. code-block:: Python

    len(data_stream_cg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1748



.. GENERATED FROM PYTHON SOURCE LINES 187-188

Trim the data based on threshold method

.. GENERATED FROM PYTHON SOURCE LINES 188-193

.. code-block:: Python

    trimmed_ = data_stream_cg.trim(column_name="Q_D/Q_GBD", method="std", robust=True)
    # View trimmed data
    print(trimmed_)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <quends.base.data_stream.DataStream object at 0x13fbcfc20>




.. GENERATED FROM PYTHON SOURCE LINES 194-196

.. code-block:: Python

    trimmed_.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time</th>
          <th>Q_D/Q_GBD</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>208.0</td>
          <td>12.974854</td>
        </tr>
        <tr>
          <th>1</th>
          <td>208.5</td>
          <td>13.264263</td>
        </tr>
        <tr>
          <th>2</th>
          <td>209.0</td>
          <td>13.563313</td>
        </tr>
        <tr>
          <th>3</th>
          <td>209.5</td>
          <td>13.815548</td>
        </tr>
        <tr>
          <th>4</th>
          <td>210.0</td>
          <td>14.046638</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 197-198

To check if data stream is stationary

.. GENERATED FROM PYTHON SOURCE LINES 198-200

.. code-block:: Python

    data_stream_cg.is_stationary("Q_D/Q_GBD")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'Q_D/Q_GBD': True}



.. GENERATED FROM PYTHON SOURCE LINES 201-202

To Plot for DataStream

.. GENERATED FROM PYTHON SOURCE LINES 202-206

.. code-block:: Python

    plotter = qnds.Plotter()
    plot = plotter.trace_plot(data_stream_cg, ["Q_D/Q_GBD"])





.. image-sg:: /auto_tutorials/images/sphx_glr_datastream_guide_001.png
   :alt: Time Series Plots for Datastream, Q_D/Q_GBD
   :srcset: /auto_tutorials/images/sphx_glr_datastream_guide_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 207-208

.. code-block:: Python

    plot = plotter.trace_plot(trimmed)



.. image-sg:: /auto_tutorials/images/sphx_glr_datastream_guide_002.png
   :alt: Time Series Plots for Datastream, HeatFlux_st
   :srcset: /auto_tutorials/images/sphx_glr_datastream_guide_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 209-211

.. code-block:: Python

    plot = plotter.steady_state_automatic_plot(data_stream_cg, variables_to_plot=["Q_D/Q_GBD"])




.. image-sg:: /auto_tutorials/images/sphx_glr_datastream_guide_003.png
   :alt: Q_D/Q_GBD
   :srcset: /auto_tutorials/images/sphx_glr_datastream_guide_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 212-214

.. code-block:: Python

    plot = plotter.steady_state_plot(data_stream_cg, variables_to_plot=["Q_D/Q_GBD"])




.. image-sg:: /auto_tutorials/images/sphx_glr_datastream_guide_004.png
   :alt: Q_D/Q_GBD
   :srcset: /auto_tutorials/images/sphx_glr_datastream_guide_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    For Q_D/Q_GBD, no manual steady state start provided. Plotting raw signal.




.. GENERATED FROM PYTHON SOURCE LINES 215-216

To show additional data use:

.. GENERATED FROM PYTHON SOURCE LINES 216-219

.. code-block:: Python

    addition_info = trimmed.additional_data(method="sliding")
    print(addition_info)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': {'A_est': 0.03170698677588585, 'p_est': 0.5410018913986299, 'n_current': 99, 'current_sem': 0.00263944463499645, 'target_sem': 0.002375500171496805, 'n_target': 120.28580081212739, 'additional_samples': 22, 'window_size': 24}, 'metadata': [{'operation': 'is_stationary', 'options': {'columns': 'HeatFlux_st'}}, {'operation': 'trim', 'options': {'column_name': 'HeatFlux_st', 'batch_size': 50, 'start_time': 0.0, 'method': 'threshold', 'threshold': 0.1, 'robust': True, 'sss_start': 158.59277222661015}}, {'operation': 'effective_sample_size', 'options': {'column_names': 'HeatFlux_st', 'alpha': 0.05}}, {'operation': 'additional_data', 'options': {'column_name': None, 'ddof': 1, 'method': 'sliding', 'window_size': None, 'reduction_factor': 0.1}}]}




.. GENERATED FROM PYTHON SOURCE LINES 220-221

To add a reduction factor

.. GENERATED FROM PYTHON SOURCE LINES 221-223

.. code-block:: Python

    addition_info = trimmed.additional_data(reduction_factor=0.2)
    print(addition_info)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'HeatFlux_st': {'A_est': 0.03170698677588585, 'p_est': 0.5410018913986299, 'n_current': 99, 'current_sem': 0.00263944463499645, 'target_sem': 0.00211155570799716, 'n_target': 149.54291116020593, 'additional_samples': 51, 'window_size': 24}, 'metadata': [{'operation': 'is_stationary', 'options': {'columns': 'HeatFlux_st'}}, {'operation': 'trim', 'options': {'column_name': 'HeatFlux_st', 'batch_size': 50, 'start_time': 0.0, 'method': 'threshold', 'threshold': 0.1, 'robust': True, 'sss_start': 158.59277222661015}}, {'operation': 'effective_sample_size', 'options': {'column_names': 'HeatFlux_st', 'alpha': 0.05}}, {'operation': 'additional_data', 'options': {'column_name': None, 'ddof': 1, 'method': 'sliding', 'window_size': None, 'reduction_factor': 0.2}}]}





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.173 seconds)


.. _sphx_glr_download_auto_tutorials_datastream_guide.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: datastream_guide.ipynb <datastream_guide.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: datastream_guide.py <datastream_guide.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: datastream_guide.zip <datastream_guide.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
